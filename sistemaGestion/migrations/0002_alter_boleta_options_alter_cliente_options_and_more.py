# Generated by Django 5.2.6 on 2025-10-17 13:39

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('sistemaGestion', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='boleta',
            options={'ordering': ['-fecha_emision'], 'verbose_name': 'Boleta', 'verbose_name_plural': 'Boletas'},
        ),
        migrations.AlterModelOptions(
            name='cliente',
            options={'ordering': ['numero_cliente'], 'verbose_name': 'Cliente', 'verbose_name_plural': 'Clientes'},
        ),
        migrations.AlterModelOptions(
            name='contrato',
            options={'ordering': ['-fecha_inicio'], 'verbose_name': 'Contrato', 'verbose_name_plural': 'Contratos'},
        ),
        migrations.AlterModelOptions(
            name='lectura',
            options={'ordering': ['-fecha_lectura'], 'verbose_name': 'Lectura', 'verbose_name_plural': 'Lecturas'},
        ),
        migrations.AlterModelOptions(
            name='medidor',
            options={'ordering': ['numero_medidor'], 'verbose_name': 'Medidor', 'verbose_name_plural': 'Medidores'},
        ),
        migrations.AlterModelOptions(
            name='notificacionlectura',
            options={'ordering': ['-fecha_notificacion'], 'verbose_name': 'Notificación de Lectura', 'verbose_name_plural': 'Notificaciones de Lectura'},
        ),
        migrations.AlterModelOptions(
            name='notificacionpago',
            options={'ordering': ['-fecha_notificacion'], 'verbose_name': 'Notificación de Pago', 'verbose_name_plural': 'Notificaciones de Pago'},
        ),
        migrations.AlterModelOptions(
            name='pago',
            options={'ordering': ['-fecha_pago'], 'verbose_name': 'Pago', 'verbose_name_plural': 'Pagos'},
        ),
        migrations.AlterModelOptions(
            name='tarifa',
            options={'ordering': ['-fecha_vigencia'], 'verbose_name': 'Tarifa', 'verbose_name_plural': 'Tarifas'},
        ),
        migrations.AlterModelOptions(
            name='usuario',
            options={'ordering': ['username'], 'verbose_name': 'Usuario', 'verbose_name_plural': 'Usuarios'},
        ),
        migrations.AddField(
            model_name='notificacionlectura',
            name='fecha_notificacion',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='notificacionlectura',
            name='leida',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='notificacionpago',
            name='fecha_notificacion',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='notificacionpago',
            name='leida',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='boleta',
            name='consumo_energetico',
            field=models.CharField(help_text='Formato: 150 kWh', max_length=45, validators=[django.core.validators.RegexValidator('^\\d+(\\.\\d+)?\\s*(kWh|kwh|KWH)$', 'Formato: número seguido de kWh (ej: 150 kWh)')]),
        ),
        migrations.AlterField(
            model_name='boleta',
            name='estado',
            field=models.CharField(choices=[('Pagado', 'Pagado'), ('Vencido', 'Vencido'), ('Pendiente', 'Pendiente')], default='Pendiente', max_length=45),
        ),
        migrations.AlterField(
            model_name='boleta',
            name='fecha_emision',
            field=models.DateField(help_text='Fecha de emisión de la boleta'),
        ),
        migrations.AlterField(
            model_name='boleta',
            name='fecha_vencimiento',
            field=models.DateField(help_text='Fecha límite de pago'),
        ),
        migrations.AlterField(
            model_name='boleta',
            name='monto_total',
            field=models.IntegerField(help_text='Monto total a pagar', validators=[django.core.validators.RegexValidator('^[1-9]\\d*$', 'El monto debe ser un número positivo mayor a 0')]),
        ),
        migrations.AlterField(
            model_name='cliente',
            name='email',
            field=models.CharField(max_length=45, unique=True, validators=[django.core.validators.EmailValidator('Ingrese un email válido')]),
        ),
        migrations.AlterField(
            model_name='cliente',
            name='nombre',
            field=models.CharField(max_length=45, validators=[django.core.validators.MinLengthValidator(2, 'El nombre debe tener al menos 2 caracteres'), django.core.validators.RegexValidator('^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$', 'El nombre solo puede contener letras y espacios')]),
        ),
        migrations.AlterField(
            model_name='cliente',
            name='numero_cliente',
            field=models.CharField(help_text='Formato: CLI-001', max_length=45, unique=True, validators=[django.core.validators.MinLengthValidator(3, 'El número de cliente debe tener al menos 3 caracteres'), django.core.validators.RegexValidator('^CLI-\\d+$', 'El formato debe ser CLI-XXX donde X son números')]),
        ),
        migrations.AlterField(
            model_name='cliente',
            name='telefono',
            field=models.CharField(max_length=15, validators=[django.core.validators.MinLengthValidator(8, 'El teléfono debe tener al menos 8 dígitos'), django.core.validators.RegexValidator('^\\+?[0-9\\s\\-()]+$', 'Formato de teléfono inválido')]),
        ),
        migrations.AlterField(
            model_name='contrato',
            name='fecha_fin',
            field=models.DateField(help_text='Fecha de finalización del contrato'),
        ),
        migrations.AlterField(
            model_name='contrato',
            name='fecha_inicio',
            field=models.DateField(help_text='Fecha de inicio del contrato'),
        ),
        migrations.AlterField(
            model_name='contrato',
            name='numero_contrato',
            field=models.CharField(help_text='Formato: CTR-001', max_length=45, unique=True, validators=[django.core.validators.MinLengthValidator(5, 'El número de contrato debe tener al menos 5 caracteres'), django.core.validators.RegexValidator('^CTR-\\d+$', 'El formato debe ser CTR-XXX donde X son números')]),
        ),
        migrations.AlterField(
            model_name='lectura',
            name='consumo_energetico',
            field=models.IntegerField(help_text='Consumo en kWh', validators=[django.core.validators.RegexValidator('^[0-9]+$', 'El consumo debe ser un número positivo')]),
        ),
        migrations.AlterField(
            model_name='lectura',
            name='fecha_lectura',
            field=models.DateField(help_text='Fecha en que se realizó la lectura'),
        ),
        migrations.AlterField(
            model_name='lectura',
            name='lectura_actual',
            field=models.IntegerField(help_text='Lectura actual del medidor', validators=[django.core.validators.RegexValidator('^[0-9]+$', 'La lectura debe ser un número positivo')]),
        ),
        migrations.AlterField(
            model_name='medidor',
            name='fecha_instalacion',
            field=models.DateField(help_text='Fecha de instalación del medidor'),
        ),
        migrations.AlterField(
            model_name='medidor',
            name='numero_medidor',
            field=models.CharField(help_text='Formato: MED-001', max_length=45, unique=True, validators=[django.core.validators.MinLengthValidator(5, 'El número de medidor debe tener al menos 5 caracteres'), django.core.validators.RegexValidator('^MED-\\d+$', 'El formato debe ser MED-XXX donde X son números')]),
        ),
        migrations.AlterField(
            model_name='medidor',
            name='ubicacion',
            field=models.CharField(max_length=45, validators=[django.core.validators.MinLengthValidator(5, 'La ubicación debe tener al menos 5 caracteres')]),
        ),
        migrations.AlterField(
            model_name='notificacionlectura',
            name='registro_consumo',
            field=models.CharField(help_text='Descripción del registro de consumo', max_length=45, validators=[django.core.validators.MinLengthValidator(3, 'El registro debe tener al menos 3 caracteres')]),
        ),
        migrations.AlterField(
            model_name='notificacionpago',
            name='deuda_pendiente',
            field=models.CharField(help_text='Descripción de la deuda pendiente', max_length=45, validators=[django.core.validators.MinLengthValidator(3, 'La descripción debe tener al menos 3 caracteres')]),
        ),
        migrations.AlterField(
            model_name='pago',
            name='estado_pago',
            field=models.CharField(choices=[('Pagado', 'Pagado'), ('No pagado', 'No pagado')], default='Pagado', max_length=45),
        ),
        migrations.AlterField(
            model_name='pago',
            name='fecha_pago',
            field=models.DateField(help_text='Fecha en que se realizó el pago'),
        ),
        migrations.AlterField(
            model_name='pago',
            name='metodo_pago',
            field=models.CharField(choices=[('Efectivo', 'Efectivo'), ('Transferencia', 'Transferencia'), ('Tarjeta', 'Tarjeta de Crédito'), ('Debito', 'Tarjeta de Débito')], max_length=45),
        ),
        migrations.AlterField(
            model_name='pago',
            name='monto_pagado',
            field=models.IntegerField(help_text='Monto pagado en pesos', validators=[django.core.validators.RegexValidator('^[1-9]\\d*$', 'El monto debe ser un número positivo mayor a 0')]),
        ),
        migrations.AlterField(
            model_name='pago',
            name='numero_referencia',
            field=models.CharField(help_text='Número de referencia o comprobante', max_length=45, validators=[django.core.validators.MinLengthValidator(5, 'El número de referencia debe tener al menos 5 caracteres')]),
        ),
        migrations.AlterField(
            model_name='tarifa',
            name='fecha_vigencia',
            field=models.DateField(help_text='Fecha desde cuando aplica esta tarifa'),
        ),
        migrations.AlterField(
            model_name='tarifa',
            name='precio',
            field=models.IntegerField(help_text='Precio por kWh en pesos chilenos', validators=[django.core.validators.RegexValidator('^[1-9]\\d*$', 'El precio debe ser un número positivo mayor a 0')]),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='email',
            field=models.CharField(max_length=45, validators=[django.core.validators.EmailValidator('Ingrese un email válido')]),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='password',
            field=models.CharField(max_length=128, validators=[django.core.validators.MinLengthValidator(6, 'La contraseña debe tener al menos 6 caracteres')]),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='telefono',
            field=models.CharField(max_length=15, validators=[django.core.validators.MinLengthValidator(8, 'El teléfono debe tener al menos 8 dígitos'), django.core.validators.RegexValidator('^\\+?[0-9\\s\\-()]+$', 'Formato de teléfono inválido')]),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='username',
            field=models.CharField(max_length=45, unique=True, validators=[django.core.validators.MinLengthValidator(3, 'El username debe tener al menos 3 caracteres'), django.core.validators.RegexValidator('^[a-zA-Z0-9_]+$', 'Solo letras, números y guiones bajos permitidos')]),
        ),
    ]
